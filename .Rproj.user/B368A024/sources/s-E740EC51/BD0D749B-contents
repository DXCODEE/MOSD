
#OV

#TCGA_OV_clin<-data.frame(tcga.affy$clin,OV_lab)

#save(TCGA_OV_clin,TCGA_info,file = "D:/OV_TCGA_info.RData")

#x<-intersect(row.names(TCGA_OV_clin),row.names(TCGA_info))


# stage<-TCGA_info$summarystage
#
# names(stage)<-row.names(TCGA_info)

OV_clin<-data.frame(tcga.affy$clin)




OV_clin$stage<-rep(NA,nrow(OV_clin))

OV_clin[row.names(TCGA_info),]$stage<-TCGA_info$summarystage



OV_clin$grade<-rep(NA,nrow(OV_clin))

OV_clin[row.names(TCGA_info),]$grade<-TCGA_info$summarygrade



OV_clin$age<-rep(NA,nrow(OV_clin))

OV_clin[row.names(TCGA_info),]$age<-TCGA_info$age_at_initial_pathologic_diagnosis



OV_clin$debulk<-rep(NA,nrow(OV_clin))

OV_clin[row.names(TCGA_info),]$debulk<-TCGA_info$debulking



save(OV_clin,file = "D:/dx/OV_clin_all.RData")


dov<-data.frame(OV_clin$days_to_death,OV_clin$vital_status,OV_clin$stage,OV_clin$grade,OV_clin$age,OV_clin$debulk,OV_lab)


colnames(dov)<-c("time","status","stage","grade","age","debulking","lab")


dov$age[which(dov$age>=65)]<-"T"

dov$age[which(dov$age<65)]<-"F"


dov$time<-as.character(dov$time)
dov$status<-as.character(dov$status)


save(dov,file = "D:/dx/ELMCC/0609/OV/ov_info.RData")

#
#  dovv<-dov[!is.na(dov$time),]
#
#  doo<-dovv[!is.na(dovv$status),]
#
# doo$time<-as.numeric(doo$time)
# doo$status<-as.numeric(doo$status)

plot_KMCurve(Surv(as.numeric(dov$time)/7,as.numeric(dov$status)),OV_lab,risk.table = T,ylab = "OS (prob.)")

#
time<-as.numeric(tcga.affy$clin[,3])
event<-as.numeric(tcga.affy$clin[,2])


event[which(time > 365*5 & event)] <- 0
time[which(time > 365*5)] <- 365*5

label<-factor(OV_lab)

df <- data.frame(time=time/7, event=event, group=label)



fit <- survfit(Surv(time/7, event) ~ label, data = df)
color <- (ggsci::pal_npg("nrc"))(length(unique(label)))
legend.labs <- na.omit(levels(droplevels(label[!(is.na(time)|is.na(event))])))
ggsurvplot(
  fit,                     # survfit object with calculated statistics.
  data = df,             # data used to fit survival curves.
  risk.table = TRUE,       # show risk table.
  pval = TRUE,             # show p-value of log-rank test.
  xlab = "Follow up (weeks)", ylab = "OS (prob.)",
  break.time.by = 100,
  palette = color, legend = "top",
  legend.title = NULL, legend.labs = legend.labs,
  risk.table.title = element_blank(), risk.table.y.text = FALSE,
  ggtheme = theme(text = element_text(family = "Arial"))
)




## uni
#
# div time<-as.numeric(dov$time)
#  status<-as.numeric(dov$status)

#dov$con_lab<-con_lab

# la<-dov$lab
# la[which(la==1)]<-2
# la[which(la==4)]<-2


lac<-dov$con_lab
lac[which(lac==3)]<-2
lac[which(lac==4)]<-2

dov$lac<-lac

un<- coxph(Surv(as.numeric(dov$time),as.numeric(dov$status)) ~ dov$lac, data =  dov)
summary(un)

## muti

 muti<-coxph(Surv(as.numeric(dov$time),as.numeric(dov$status)) ~ dov$age+dov$stage+dov$grade+dov$debulking+dov$la+dov$lac, data =  dov)



  x1<-dov[which(dov$lab==1),]
  x2<-dov[which(dov$lab==2),]
  x3<-dov[which(dov$lab==3),]
  x4<-dov[which(dov$lab==4),]

  x<-rbind(x3,x4)

  co<- coxph(Surv(as.numeric(x$time),as.numeric(x$status)) ~ x$lab, data =  x)

  summary(co)



ovd<-data.frame(OV_hidden,OV_lab)

row.names(ovd)<-row.names(mstep)

write.csv(ovd,file = "D:/dx/ELMCC/0609/OV/OV.csv")
##.................................................................

lac<-lab_con

lac[which(lac==1)]<-2
lac[which(lac==3)]<-2

dfg$lac<-lac

un<- coxph(Surv(as.numeric(dfg$relapse.time),as.numeric(dfg$DFS)) ~ dfg$lac, data =  dfg)
summary(un)


la<-GC_lab

la[which(la==1)]<-2
la[which(la==3)]<-2

dfg$la<-la




## muti

dfgg<-dfg

dfgg$stage[which(dfgg$stage==3)]<-4

dfgg$stage[which(dfgg$stage==1)]<-2

dfgg$relapse.time[which(dfgg$relapse.time>1825)]<-1825

dfgg$age<-as.character(dfgg$age)
dfgg$age[which(dfgg$age<=65)]<-0
dfgg$age[which(dfgg$age>65)]<-1


muti<-coxph(Surv(as.numeric(dfgg$relapse.time),as.numeric(dfgg$DFS)) ~dfgg$age+dfgg$sex+dfgg$stage+dfgg$LN+dfgg$lac+dfgg$la, data =  dfgg)





###
library(limma)

#lab<-GC_lab

  lab<-OV_lab

  #GSEtotal<-t(mrna)
  GSEtotal<-t(mstep)
  lab[which(lab != 3)]<-0
  group<-lab
  group <- as.factor(group)

  fit <- lmFit(GSEtotal, model.matrix(~ group))
  fit <- eBayes(fit)
  tt <- topTable(fit, coef=2, number=Inf, adjust.method="BH", p.value = 0.05, lfc = 0.1)
  #tt <- tt[which(tt$P.Value < 0.05), ]
  de_genes <- rownames(tt)
  de_genes

#au4<-de_genes
#au3<-de_genes
#au2<-de_genes
#au1<-de_genes

uni_genes <- de_genes
target_pred  <- t(GSEtotal[which(rownames(GSEtotal) %in% uni_genes), ])
# label <- as.vector(group)
target_class <- matrix(rep(lab, length(uni_genes)), nrow = ncol(GSEtotal))
pred <- prediction(target_pred, target_class)
auc <- performance(pred,"auc")
auc <- unlist(slot(auc, "y.values"))

names(auc) <- colnames(target_pred)

aucc<-auc[which(auc > 0.5)]
aucc

#auc <- sort(auc[which(auc > 0.75)], decreasing = T)
auc_genes <- names(aucc)

auc_genes <- as.vector(auc_genes)


#oau4<-auc_genes
#oau3<-auc_genes
#oau2<-auc_genes
#oau1<-auc_genes



#au4<-auc_genes
#au3<-auc_genes

#au2<-auc_genes
#au1<-auc_genes
au<-list(au1,au2,au3,au4)

save(au,file = "D:/dx/GC genes/au.RData")

dc<- do.call(rbind,strsplit(oau3,"X",fixed = TRUE))[,2]

id<-mapIds(org.Hs.eg.db,keys = dc, keytype = "ENTREZID", column = "SYMBOL")

a<-as.character(id)

a<-a[!is.na(a)]


o3<-gprofiler(a, organism = "hsapiens")

write.csv(o3,file = "D:/dx/o3.csv")


#a<-c(a1,a2,a3,a4)

# n1<-union(a1,a2)
#
# n2<-union(n1,a3)
#
# n3<-union(n2,a4)


# en<-mapIds(org.Hs.eg.db, keys = colnames(mrna), keytype = "ENTREZID", column = "SYMBOL")
#
# mna<-mrna
#
# colnames(mna)<-en


 n1<-union(au1,au2)
#
 n2<-union(n1,au3)
#
 n3<-union(n2,au4)

#au<-c(au1,au2,au3,au4)

#seg<-mstep[,n3]
 seg<-mrna[,n3]





#ga254<-t(GSE62254_ge.syms)

mar<- apply(mstep,2,mad)

ovms <- mstep[, mar>1]



ms<-apply(mstep,2,function(x) (x-mean(x))/sd(x))


sig_gc_con<-sigclustTest(t(seg),lab_con,nsim=100, nrep=1, icovest=1)



save(mrna,mstep,dfg,tcga,file = "D:/dx/ELMCC/cancer_data.RData")

sig_gc<-sig

sig_gc_con<-sig

save(sig_gc,file = "D:/dx/ELMCC/sig_gc.RData")

r<-sig_gc
image(t(r[nrow(r):1, ]), axes=F, breaks=c(0.001, seq(0, 1, by=0.01), 1.001), useRaster=T,
      col=colorRampPalette(c("steelblue", "white", "darkorange"))(102))


N1<-sig_gc_con
rownames(N1)<-c("class1","class2","class3","class4")

colnames(N1)<-c("class1","class2","class3","class4")


datN11<-melt(N1)

 datN11$pv <- round(datN11$value,2)


#  datN11<-datN11[,-3]
#
# datN11$sig <- datN11$pv < 0.1

#install.packages("extrafont")

# library(extrafont)
# font_import( pattern = "[Aa]rial")
# loadfonts(device="win")
#
# library(cowplot)



 ggplot(datN11, aes(x=Var1, y=Var2, fill=pv) )+
  geom_tile() +geom_text(aes(label=paste(pv)))+ scale_fill_gradientn(colours=c("white", "#2166AC"),na.value = "transparent",
                        breaks=(0:1)/2,labels=as.character((0:1)/2),
                       limits=c(0,1))+ theme(text=element_text(family = "Arial"),
        axis.text.x = element_text(),
        axis.title.x=element_blank(),
        axis.title.y=element_blank(),
        legend.title = element_blank())




 get_lower_tri<-function(cormat){
   cormat[upper.tri(cormat)] <- NA
   return(cormat)
 }
 # Get upper triangle of the correlation matrix
 get_upper_tri <- function(cormat){
   cormat[lower.tri(cormat)]<- NA
   return(cormat)
 }


 N1<-sig_ov12
 rownames(N1)<-c("class1","class2","class3","class4")

 colnames(N1)<-c("class1","class2","class3","class4")

 upper_tri <- get_upper_tri(N1)
 upper_tri



 melted_cormat <- melt(upper_tri, na.rm = TRUE)
 # Heatmap
 #library(ggplot2)

 ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
   geom_tile(color = "black")+
   scale_fill_gradient2(low = "white", high = "grey",
                        midpoint = 0, limit = c(0,1), space = "Lab",
                        name="P-value") +
   theme_minimal()+  theme(axis.text.x = element_text(angle = 45, vjust = 1,
                                    size = 12, hjust = 1))+ theme(
                                      axis.title.x = element_blank(),
                                      axis.title.y = element_blank(),
                                      panel.grid.major = element_blank(),
                                      panel.border = element_blank(),
                                      panel.background = element_blank(),
                                      axis.ticks = element_blank(),
                                      legend.justification = c(1, 0),
                                      legend.position = c(0.55, 0.82),
                                      legend.direction = "horizontal")+
   guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
                                title.position = "top", title.hjust = 0.5))





   coord_fixed()

 +

   geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +

























#ssge<-scale(seg)

ssge<-apply(seg,2,function(x) (x-mean(x))/sd(x))

ssge[which(ssge>0.8)]<-0.8

ssge[which(ssge < (-0.8))]<- -0.8


sg<-data.frame(ssge)

sg$lab<-GC_lab

#sg$lab<-OV_lab

sge<-rbind(sg[which(sg$lab==1),],sg[which(sg$lab==2),],sg[which(sg$lab==3),],sg[which(sg$lab==4),])

df = data.frame(MS = c(rep("Class1",nrow(sge[which(sg$lab==1),])),rep("Class2",nrow(sge[which(sg$lab==2),])),
                       rep("Class3",nrow(sge[which(sg$lab==3),])),rep("Class4",nrow(sge[which(sg$lab==4),]))))

rownames(df)<-rownames(sge)

#color <- (ggsci::pal_npg("nrc"))(length(unique(GC_lab)))

col<-list(MS=c("Class1"= "#E64B35FF","Class2"="#4DBBD5FF","Class3"="#00A087FF","Class4"="#3C5488FF"))

#"peachpuff4","dodgerblue4","firebrick3 ","black"


pheatmap(t(sge[,-247]),breaks=c(-1, seq(-0.8,0.8, by=0.01), 1),
         color = colorRampPalette(c("steelblue","white", "darkorange"))(162),

         cluster_cols = F,cluster_rows = F,show_rownames = F,show_colnames = F,annotation_names_row = F, annotation_names_col = FALSE,

         annotation_col = df,annotation_colors =col,annotation_legend = F)



#pheatmap(ssge,breaks=c(-3, seq(-2,2, by=0.01), 3), color = colorRampPalette(c("darkolivegreen","white","darkred"))(402),show_rownames = FALSE,show_colnames = FALSE)



#a<-list(a1,a2,a3,a4)

#g<-gprofiler(a1, organism = "hsapiens")

# ex<-c("Klf4", "Pax5", "Sox2", "Nanog")
#
# gprofiler(ex, organism = "hsapiens")



p53<-as.vector(geneIds(gmt[["KEGG_P53_SIGNALING_PATHWAY"]]))


# sec<-intersect(p53,colnames(mrna))
#
# po<-sapply(1:length(sec), function(i){
#
#   which(colnames(mrna)==sec[i])
#
# })

 gc_mrna<-mrna

 ord<-GR$s2n.matrix[,1]
 orb<-GR$obs.order.matrix[,1]


#
# names(ord)<-colnames(mrna)
#
# names(po)<-sec
#
# GSEA.EnrichmentScore(GR$s2n.matrix[,1],po)
